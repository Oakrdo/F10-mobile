-- Auto Farm Tennenman com Teleport - Dragon Ball Rage (Versão Corrigida)
-- Por: DeepSeek-R1

wait(2)

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Variáveis
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Configurações
local FARM_RANGE = 200
local ATTACK_RANGE = 10
local TELEPORT_OFFSET = 5
local ATTACK_DELAY = 0.4
local IS_FARMING = false
local currentTarget = nil
local tennenmanNPCs = {}

-- GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TennenmanFarm"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Frame principal
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0.5, 0, 0.22, 0)
mainFrame.Position = UDim2.new(0.05, 0, 0.7, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 30, 30)
mainFrame.BackgroundTransparency = 0.2
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Título
local title = Instance.new("TextLabel")
title.Text = "🐉 AUTO FARM TENNENMAN"
title.Size = UDim2.new(1, 0, 0.18, 0)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.new(1, 1, 1)
title.TextScaled = true
title.Font = Enum.Font.SourceSansBold
title.Parent = mainFrame

-- Status
local statusLabel = Instance.new("TextLabel")
statusLabel.Text = "🔴 PARADO"
statusLabel.Size = UDim2.new(1, 0, 0.18, 0)
statusLabel.Position = UDim2.new(0, 0, 0.18, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.new(1, 0.5, 0.5)
statusLabel.TextScaled = true
statusLabel.Parent = mainFrame

-- Info
local infoLabel = Instance.new("TextLabel")
infoLabel.Text = "NPCs: 0 | Alvo: Nenhum"
infoLabel.Size = UDim2.new(1, 0, 0.18, 0)
infoLabel.Position = UDim2.new(0, 0, 0.36, 0)
infoLabel.BackgroundTransparency = 1
infoLabel.TextColor3 = Color3.new(0.8, 0.8, 1)
infoLabel.TextScaled = true
infoLabel.Parent = mainFrame

-- Botões
local buttonFrame = Instance.new("Frame")
buttonFrame.Size = UDim2.new(1, 0, 0.46, 0)
buttonFrame.Position = UDim2.new(0, 0, 0.54, 0)
buttonFrame.BackgroundTransparency = 1
buttonFrame.Parent = mainFrame

-- Botão Iniciar/Parar
local toggleButton = Instance.new("TextButton")
toggleButton.Text = "▶ INICIAR"
toggleButton.Size = UDim2.new(0.48, 0, 0.9, 0)
toggleButton.Position = UDim2.new(0.01, 0, 0.05, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(80, 180, 80)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextScaled = true
toggleButton.Parent = buttonFrame

-- Botão Procurar NPCs
local searchButton = Instance.new("TextButton")
searchButton.Text = "🔍 ATUALIZAR"
searchButton.Size = UDim2.new(0.48, 0, 0.9, 0)
searchButton.Position = UDim2.new(0.51, 0, 0.05, 0)
searchButton.BackgroundColor3 = Color3.fromRGB(80, 120, 200)
searchButton.TextColor3 = Color3.new(1, 1, 1)
searchButton.TextScaled = true
searchButton.Parent = buttonFrame

-- Função para explorar e encontrar a estrutura correta
local function findCorrectStructure()
    print("🔍 Explorando estrutura do Workspace...")
    
    -- Listar tudo no Workspace para debug
    print("📁 Conteúdo do Workspace:")
    for _, child in pairs(Workspace:GetChildren()) do
        print("   - " .. child.Name .. " (" .. child.ClassName .. ")")
        
        -- Se for uma pasta, explorar seu conteúdo
        if child:IsA("Folder") then
            for _, subChild in pairs(child:GetChildren()) do
                print("     ├── " .. subChild.Name .. " (" .. subChild.ClassName .. ")")
                
                -- Se for a pasta NPCs, explorar mais
                if string.find(subChild.Name:lower(), "npc") then
                    for _, npc in pairs(subChild:GetChildren()) do
                        print("     │   ├── " .. npc.Name .. " (" .. npc.ClassName .. ")")
                    end
                end
            end
        end
    end
end

-- Função para encontrar NPCs Tennenman
local function findTennenmanNPCs()
    tennenmanNPCs = {}
    
    print("🔍 Procurando Tennenman...")
    
    -- Tentar diferentes estruturas possíveis
    local possibleStructures = {
        Workspace:FindFirstChild("Map"),
        Workspace:FindFirstChild("Maps"),
        Workspace:FindFirstChild("NPCs"),
        Workspace:FindFirstChild("Enemies"),
        Workspace:FindFirstChild("Characters")
    }
    
    local foundStructure = nil
    local foundNPCs = false
    
    for _, structure in pairs(possibleStructures) do
        if structure then
            print("✅ Estrutura encontrada: " .. structure.Name)
            foundStructure = structure
            break
        end
    end
    
    if not foundStructure then
        -- Se não encontrou nenhuma estrutura conhecida, procurar em todo o Workspace
        print("🔍 Procurando Tennenman em todo o Workspace...")
        for _, descendant in pairs(Workspace:GetDescendants()) do
            if descendant:IsA("Model") and string.find(descendant.Name:lower(), "tennen") then
                print("🎯 Tennenman encontrado: " .. getFullPath(descendant))
                
                local rootPartNPC = descendant:FindFirstChild("HumanoidRootPart")
                local humanoidNPC = descendant:FindFirstChildOfClass("Humanoid")
                
                if rootPartNPC and humanoidNPC and humanoidNPC.Health > 0 then
                    local distance = (rootPartNPC.Position - rootPart.Position).Magnitude
                    
                    if distance <= FARM_RANGE then
                        table.insert(tennenmanNPCs, {
                            Model = descendant,
                            RootPart = rootPartNPC,
                            Humanoid = humanoidNPC,
                            Position = rootPartNPC.Position,
                            Distance = distance
                        })
                        foundNPCs = true
                        print("✅ Tennenman adicionado - Distância: " .. math.floor(distance))
                    end
                end
            end
        end
    else
        -- Procurar na estrutura encontrada
        print("🔍 Procurando na estrutura: " .. foundStructure.Name)
        
        -- Procurar por NPCs dentro da estrutura
        for _, descendant in pairs(foundStructure:GetDescendants()) do
            if descendant:IsA("Model") and string.find(descendant.Name:lower(), "tennen") then
                print("🎯 Tennenman encontrado: " .. getFullPath(descendant))
                
                local rootPartNPC = descendant:FindFirstChild("HumanoidRootPart")
                local humanoidNPC = descendant:FindFirstChildOfClass("Humanoid")
                
                if rootPartNPC and humanoidNPC and humanoidNPC.Health > 0 then
                    local distance = (rootPartNPC.Position - rootPart.Position).Magnitude
                    
                    if distance <= FARM_RANGE then
                        table.insert(tennenmanNPCs, {
                            Model = descendant,
                            RootPart = rootPartNPC,
                            Humanoid = humanoidNPC,
                            Position = rootPartNPC.Position,
                            Distance = distance
                        })
                        foundNPCs = true
                        print("✅ Tennenman adicionado - Distância: " .. math.floor(distance))
                    end
                end
            end
        end
    end
    
    if not foundNPCs then
        -- Busca mais ampla por qualquer modelo com "tennen" no nome
        print("🔍 Busca ampla por Tennenman...")
        for _, descendant in pairs(Workspace:GetDescendants()) do
            if descendant:IsA("Model") and (
                string.find(descendant.Name:lower(), "tennen") or
                string.find(descendant.Name:lower(), "tenen") or
                string.find(descendant.Name:lower(), "tenman")
            ) then
                print("🎯 Possível Tennenman: " .. getFullPath(descendant))
                
                local rootPartNPC = descendant:FindFirstChild("HumanoidRootPart") or descendant:FindFirstChild("Head")
                local humanoidNPC = descendant:FindFirstChildOfClass("Humanoid")
                
                if rootPartNPC and humanoidNPC and humanoidNPC.Health > 0 then
                    local distance = (rootPartNPC.Position - rootPart.Position).Magnitude
                    
                    if distance <= FARM_RANGE then
                        table.insert(tennenmanNPCs, {
                            Model = descendant,
                            RootPart = rootPartNPC,
                            Humanoid = humanoidNPC,
                            Position = rootPartNPC.Position,
                            Distance = distance
                        })
                        foundNPCs = true
                        print("✅ Tennenman adicionado - Distância: " .. math.floor(distance))
                    end
                end
            end
        end
    end
    
    infoLabel.Text = "NPCs: " .. #tennenmanNPCs
    return #tennenmanNPCs
end

-- Função auxiliar para obter caminho completo
local function getFullPath(obj)
    local path = obj.Name
    local parent = obj.Parent
    while parent and parent ~= Workspace do
        path = parent.Name .. " → " .. path
        parent = parent.Parent
    end
    return "Workspace → " .. path
end

-- Função para teleportar instantaneamente
local function teleportTo(position)
    if not rootPart then return end
    local lookAt = CFrame.new(position + Vector3.new(0, TELEPORT_OFFSET, 0), position)
    rootPart.CFrame = lookAt
end

-- Função para simular ataque
local function performAttack()
    -- Tecla E (PC)
    pcall(function()
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end)
    
    -- Botão Combat (Mobile)
    pcall(function()
        for _, gui in pairs(player.PlayerGui:GetDescendants()) do
            if gui:IsA("TextButton") and (
                string.find(gui.Name:lower(), "combat") or
                string.find(gui.Name:lower(), "attack") or
                gui.Name == "Combat" or
                gui.Name == "Attack"
            ) then
                gui:FireEvent("MouseButton1Click")
                break
            end
        end
    end)
end

-- Função para verificar se o alvo ainda existe e está vivo
local function isTargetValid(target)
    if not target or not target.Model then return false end
    if not target.Model.Parent then return false end
    
    local humanoid = target.Model:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    return true
end

-- Função principal de farm
local function farmLoop()
    while IS_FARMING do
        if not character or not rootPart then
            character = player.Character
            if character then
                rootPart = character:FindFirstChild("HumanoidRootPart")
            end
            wait(1)
            continue
        end
        
        -- Buscar NPCs
        findTennenmanNPCs()
        
        if #tennenmanNPCs > 0 then
            currentTarget = tennenmanNPCs[1]
            
            if isTargetValid(currentTarget) then
                statusLabel.Text = "🟢 ATACANDO TENNENMAN"
                statusLabel.TextColor3 = Color3.new(0.5, 1, 0.5)
                infoLabel.Text = "NPCs: " .. #tennenmanNPCs .. " | Saúde: " .. currentTarget.Humanoid.Health
                
                -- Teleportar para perto do Tennenman
                teleportTo(currentTarget.Position)
                wait(0.1)
                
                -- Atacar
                performAttack()
                
                -- Virar para o alvo
                rootPart.CFrame = CFrame.new(rootPart.Position, currentTarget.Position)
                
                wait(ATTACK_DELAY)
                
            else
                -- Tennenman morreu
                statusLabel.Text = "🟡 TENNENMAN MORREU"
                statusLabel.TextColor3 = Color3.new(1, 1, 0.5)
                table.remove(tennenmanNPCs, 1) -- Remover da lista
                wait(1)
            end
            
        else
            statusLabel.Text = "🟡 PROCURANDO TENNENMAN..."
            statusLabel.TextColor3 = Color3.new(1, 1, 0.5)
            wait(1)
        end
        
        wait(0.1)
    end
end

-- Conectar botões
toggleButton.MouseButton1Click:Connect(function()
    IS_FARMING = not IS_FARMING
    
    if IS_FARMING then
        toggleButton.Text = "⏹ PARAR"
        toggleButton.BackgroundColor3 = Color3.fromRGB(180, 80, 80)
        statusLabel.Text = "🟢 INICIANDO..."
        statusLabel.TextColor3 = Color3.new(0.5, 1, 0.5)
        
        -- Explorar estrutura primeiro
        findCorrectStructure()
        
        -- Iniciar loop de farm
        farmLoop()
    else
        toggleButton.Text = "▶ INICIAR"
        toggleButton.BackgroundColor3 = Color3.fromRGB(80, 180, 80)
        statusLabel.Text = "🔴 PARADO"
        statusLabel.TextColor3 = Color3.new(1, 0.5, 0.5)
        currentTarget = nil
        tennenmanNPCs = {}
    end
end)

searchButton.MouseButton1Click:Connect(function()
    local count = findTennenmanNPCs()
    statusLabel.Text = "🔍 ENCONTRADOS: " .. count
    statusLabel.TextColor3 = Color3.new(0.8, 0.8, 1)
    wait(2)
    if not IS_FARMING then
        statusLabel.Text = "🔴 PARADO"
        statusLabel.TextColor3 = Color3.new(1, 0.5, 0.5)
    end
end)

-- Reconectar quando o personagem morrer
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    if IS_FARMING then
        wait(2)
        farmLoop()
    end
end)

-- Inicialização
print("🐉 Auto Farm Tennenman carregado!")
print("Explorando estrutura do jogo...")
findCorrectStructure()
findTennenmanNPCs()

print("▶ INICIAR - Começa o farm automático")
print("🔍 ATUALIZAR - Atualiza lista de NPCs")